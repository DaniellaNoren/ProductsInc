// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Products_Inc.Data;

namespace Products_Inc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211101160143_newDb")]
    partial class newDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "438db5c8-0513-43a0-a84c-cd416c4e3a54",
                            ConcurrencyStamp = "2437c96f-c774-4e11-b984-aad01789e8f1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0948bea6-fb82-49c9-8cd8-fec213fe8e8a",
                            ConcurrencyStamp = "e9136637-75aa-4b18-90ae-3fd9740486ae",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "cb7d89fd-565b-4de3-9912-1e26a93235cf",
                            RoleId = "438db5c8-0513-43a0-a84c-cd416c4e3a54"
                        },
                        new
                        {
                            UserId = "cb7d89fd-565b-4de3-9912-1e26a93235cf",
                            RoleId = "0948bea6-fb82-49c9-8cd8-fec213fe8e8a"
                        },
                        new
                        {
                            UserId = "76bad255-6a6d-4ff7-b479-f75d024c9a7c",
                            RoleId = "0948bea6-fb82-49c9-8cd8-fec213fe8e8a"
                        },
                        new
                        {
                            UserId = "dcedd648-2563-42fc-b174-f5c47ce91dc1",
                            RoleId = "0948bea6-fb82-49c9-8cd8-fec213fe8e8a"
                        },
                        new
                        {
                            UserId = "6ecfc446-1c79-48a4-94d6-32d16f54d207",
                            RoleId = "0948bea6-fb82-49c9-8cd8-fec213fe8e8a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Products_Inc.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            UserId = "6ecfc446-1c79-48a4-94d6-32d16f54d207"
                        },
                        new
                        {
                            OrderId = 2,
                            UserId = "76bad255-6a6d-4ff7-b479-f75d024c9a7c"
                        },
                        new
                        {
                            OrderId = 3,
                            UserId = "dcedd648-2563-42fc-b174-f5c47ce91dc1"
                        },
                        new
                        {
                            OrderId = 4,
                            UserId = "dcedd648-2563-42fc-b174-f5c47ce91dc1"
                        });
                });

            modelBuilder.Entity("Products_Inc.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            OrderProductId = 1,
                            Amount = 4,
                            OrderId = 1,
                            ProductId = 50
                        },
                        new
                        {
                            OrderProductId = 2,
                            Amount = 2,
                            OrderId = 1,
                            ProductId = 52
                        },
                        new
                        {
                            OrderProductId = 3,
                            Amount = 1,
                            OrderId = 1,
                            ProductId = 57
                        },
                        new
                        {
                            OrderProductId = 4,
                            Amount = 6,
                            OrderId = 2,
                            ProductId = 52
                        },
                        new
                        {
                            OrderProductId = 5,
                            Amount = 1,
                            OrderId = 2,
                            ProductId = 54
                        },
                        new
                        {
                            OrderProductId = 6,
                            Amount = 2,
                            OrderId = 2,
                            ProductId = 56
                        },
                        new
                        {
                            OrderProductId = 7,
                            Amount = 9,
                            OrderId = 3,
                            ProductId = 55
                        },
                        new
                        {
                            OrderProductId = 8,
                            Amount = 1,
                            OrderId = 3,
                            ProductId = 57
                        },
                        new
                        {
                            OrderProductId = 9,
                            Amount = 3,
                            OrderId = 3,
                            ProductId = 51
                        },
                        new
                        {
                            OrderProductId = 10,
                            Amount = 5,
                            OrderId = 4,
                            ProductId = 52
                        },
                        new
                        {
                            OrderProductId = 11,
                            Amount = 3,
                            OrderId = 4,
                            ProductId = 53
                        },
                        new
                        {
                            OrderProductId = 12,
                            Amount = 1,
                            OrderId = 4,
                            ProductId = 55
                        });
                });

            modelBuilder.Entity("Products_Inc.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 10,
                            ImgPath = "./img/img1.png",
                            ProductDescription = "A nice eko quality bananas from peru.",
                            ProductName = "Bananas",
                            ProductPrice = 34
                        },
                        new
                        {
                            ProductId = 20,
                            ImgPath = "./img/img2.jpg",
                            ProductDescription = "A good fruit.",
                            ProductName = "Pomegranete",
                            ProductPrice = 6
                        },
                        new
                        {
                            ProductId = 30,
                            ImgPath = "./img/img11.jpg",
                            ProductDescription = "Sweet tomatos.",
                            ProductName = "Tomatos A-Class",
                            ProductPrice = 3
                        },
                        new
                        {
                            ProductId = 40,
                            ImgPath = "./img/img16.png",
                            ProductDescription = "Butter made of sunflower seeds.",
                            ProductName = "Sunflower Butter",
                            ProductPrice = 54
                        },
                        new
                        {
                            ProductId = 50,
                            ImgPath = "./img/img4.jpg",
                            ProductDescription = "Nice for your health",
                            ProductName = "Orange",
                            ProductPrice = 30
                        },
                        new
                        {
                            ProductId = 51,
                            ImgPath = "./img/img6.jpg",
                            ProductDescription = "Good to drink",
                            ProductName = "Coca Cola",
                            ProductPrice = 16
                        },
                        new
                        {
                            ProductId = 52,
                            ImgPath = "./img/img7.jpg",
                            ProductDescription = "Good for health",
                            ProductName = "Oreo",
                            ProductPrice = 10
                        },
                        new
                        {
                            ProductId = 53,
                            ImgPath = "./img/img8.jpg",
                            ProductDescription = "Healthy breakfast",
                            ProductName = "Corn Flakes",
                            ProductPrice = 25
                        },
                        new
                        {
                            ProductId = 54,
                            ImgPath = "./img/img9.jpg",
                            ProductDescription = "Nice to make food",
                            ProductName = "Salt",
                            ProductPrice = 9
                        },
                        new
                        {
                            ProductId = 55,
                            ImgPath = "./img/img12.jpg",
                            ProductDescription = "Good for health",
                            ProductName = "Avocado",
                            ProductPrice = 18
                        },
                        new
                        {
                            ProductId = 56,
                            ImgPath = "./img/img14.jpg",
                            ProductDescription = "Nice to eat",
                            ProductName = "Eggo",
                            ProductPrice = 30
                        },
                        new
                        {
                            ProductId = 57,
                            ImgPath = "./img/img16.jpg",
                            ProductDescription = "Creamy sun butter",
                            ProductName = "SunButter",
                            ProductPrice = 35
                        });
                });

            modelBuilder.Entity("Products_Inc.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("TransactionComplete")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Products_Inc.Models.ShoppingCartProduct", b =>
                {
                    b.Property<int>("ShoppingCartProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartProducts");
                });

            modelBuilder.Entity("Products_Inc.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "cb7d89fd-565b-4de3-9912-1e26a93235cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a66120ad-b521-4aba-9f49-64c69d97fabf",
                            Email = "customer1@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tSZugR1dxIT3MztucAsI18EvcO8LOO0Kzh+gDCAU1djGUzszY+zcxBPJeJ+SS+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9043a9bc-1248-4011-8ebf-c3ee3176432a",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "76bad255-6a6d-4ff7-b479-f75d024c9a7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2148fe9-883e-41f7-a17d-f371f5050bbc",
                            Email = "customer1@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@EMAIL.COM",
                            NormalizedUserName = "CUSTOMER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMa5+bW4e8HzBvEP7kZyX3I4f1UCzbzX+KpqEvL+kpfSsEh76+Ub/U8KNpqMsV2UeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67f64f92-56e2-4650-90d8-2626f10f2ab7",
                            TwoFactorEnabled = false,
                            UserName = "customer1"
                        },
                        new
                        {
                            Id = "dcedd648-2563-42fc-b174-f5c47ce91dc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a5df793-ef0a-4639-98bb-8ae4d2f483f5",
                            Email = "customer2@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@EMAIL.COM",
                            NormalizedUserName = "CUSTOMER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEBVu068Scw+E9g/4eHeMB6m1Gj2s3LvIvXrYKvTFZP0OrdxsOhcQUg0KCbHZHYN5bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5b83059-52d7-430e-ab34-b9b5009bacce",
                            TwoFactorEnabled = false,
                            UserName = "customer2"
                        },
                        new
                        {
                            Id = "6ecfc446-1c79-48a4-94d6-32d16f54d207",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a32cf39-3de8-475a-a33e-d8090c8d8859",
                            Email = "customer3@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER3@EMAIL.COM",
                            NormalizedUserName = "CUSTOMER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEOqONkjk+/yVy3R5MXcIUsFkDyFwlj4iy3BZQ2vZftMkkGItoE5alTzFTvufZzIG3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd9d4a39-86b0-4a01-a789-5644ecb76313",
                            TwoFactorEnabled = false,
                            UserName = "customer3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Products_Inc.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Products_Inc.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products_Inc.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Products_Inc.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Products_Inc.Models.Order", b =>
                {
                    b.HasOne("Products_Inc.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Products_Inc.Models.OrderProduct", b =>
                {
                    b.HasOne("Products_Inc.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products_Inc.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Products_Inc.Models.ShoppingCart", b =>
                {
                    b.HasOne("Products_Inc.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Products_Inc.Models.ShoppingCartProduct", b =>
                {
                    b.HasOne("Products_Inc.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products_Inc.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Products")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
